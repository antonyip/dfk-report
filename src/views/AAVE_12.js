/*!

=========================================================
* Paper Dashboard React - v1.3.0
=========================================================

* Product Page: https://www.creative-tim.com/product/paper-dashboard-react
* Copyright 2021 Creative Tim (https://www.creative-tim.com)

* Licensed under MIT (https://github.com/creativetimofficial/paper-dashboard-react/blob/main/LICENSE.md)

* Coded by Creative Tim

=========================================================

* The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.

*/
import axios from "axios";
import React, { useEffect, useState } from "react";
// react plugin used to create charts
import {
  Line,
  Pie
} from "react-chartjs-2";
// reactstrap components
import {
  Card,
  CardHeader,
  CardBody,
  CardFooter,
  CardTitle,
  Row,
  Col,
  Button,
  TabContent,
  TabPane,
  Nav,
  NavItem,
  NavLink,
  Spinner
} from "reactstrap";
import classnames from 'classnames';

function ValueWrapper(value) {
  let textValue = value.toString();
  let bigText = textValue.split('.');
  let smallText = bigText[1];
  bigText = bigText[0];
  if (bigText === '0') return bigText + '.' + smallText.slice(0,3)
  if (bigText.length < 4) return bigText + ''
  if (bigText.length < 5) return bigText.slice(0,1) + 'K'
  if (bigText.length < 6) return bigText.slice(0,2) + 'K'
  if (bigText.length < 7) return bigText.slice(0,3) + 'K'

  if (bigText.length < 8) return bigText.slice(0,1) + ' M'
  if (bigText.length < 9) return bigText.slice(0,2) + ' M'
  if (bigText.length < 10) return bigText.slice(0,3) + ' M'

  if (bigText.length < 11) return bigText.slice(0,1) + ' B'
  if (bigText.length < 12) return bigText.slice(0,2) + ' B'
  if (bigText.length < 13) return bigText.slice(0,3) + ' B'

  if (bigText.length < 14) return bigText.slice(0,1) + ' T'
  if (bigText.length < 15) return bigText.slice(0,2) + ' T'
  if (bigText.length < 16) return bigText.slice(0,3) + ' T'

  return value;
}


function TotalValueLocked() {

    const [data, setData] = useState();
    const [dataDaily, setDataDaily] = useState();
    const [totalLiquid, setTotalLiquid] = useState();
    const [totalUtilz, setTotalUtilz] = useState();
    const [error, setError] = useState();
    const [errorData, setErrorData] = useState();
    const [loading, setLoading] = useState();
    const [firstChart, setFirstChart] = useState();
    const firstChartOptions = {
      title: { display: true, text: 'My Chart' },
      zoom: {
        enabled: true,
        mode: 'x',
      },
      pan: {
        enabled: true,
        mode: 'x',
      },
    }
  
    const mainChartClick = dataset => {
      if (!dataset.length) return;
      const datasetIndex = dataset[0].datasetIndex;
      //console.log("di",firstChart.datasets[datasetIndex].label);
    }
  
    const getElementAtEvent = element => {
  
    };
    
    let labels = []
    let WBTC = []
    let WBTC_Utils = []
  
    useEffect( () => {
      
      axios.get("https://api.flipsidecrypto.com/api/v2/queries/040b9c20-27f4-4e28-ae19-3fab6d948047/data/latest")
      .then( response => {
        setData(response.data);
        response.data.map( x => {
          labels.push(x.EDDATE.slice(0,10))
          WBTC.push(x.WBTC_TOTAL_LIQUIDITY_USD)
          WBTC_Utils.push(x.WBTC_UTILIZATION_RATE)
        })
  
        const T_Liquid = {
          labels: labels,
          datasets: [
          {
              label: "Total Liquidity",
              data: WBTC,
              fill: true,
              backgroundColor: "rgba(220, 0, 0, 0.2)",
              borderColor: "rgba(220, 0, 0, 1)"
          }
        ]
        };
  
        const T_Utliz = {
          labels: labels,
          datasets: [
          {
              label: "% Utilization of the Protocol",
              data: WBTC_Utils,
              fill: true,
              backgroundColor: "rgba(20, 200, 0, 0.2)",
              borderColor: "rgba(20, 200, 0, 1)"
          }
        ]
        };
  
        //setFirstChart(localChartData);
        setTotalLiquid(T_Liquid);
        setTotalUtilz(T_Utliz);
  
      }).catch(error => {
        setError(true);
        setErrorData(error);
      }).finally(() => {
        setLoading(false);
      })
    } , []);
  
    if (error) return <div>{errorData}</div>;
    if (loading) return <div>Loading...</div>;
  
    return (<>
    <h1>Metric Dashboard</h1>
    <p>
    Create a dashboard that visualizes these metrics for any given week in the past year:
      <li>Total Liquidity</li>
      <li>% Utilization (utilization of available liquidity) and generated interest for depositors</li>
      <li>Total flashloan volume in USD and amount of fees they generated for depositors</li>
      <li>Total USD liquidated and resultant fees for liquidators</li>
      <li>Total fees generated by the protocol</li>
      <li>Total Fees generated for ecosystem income collectors on Ethereum</li>
      <ul>
          <li>0x464c71f6c2f760dda6093dcb91c24c39e5d6e18c</li>
          <li>0xe3d9988f676457123c5fd01297605efdd0cba1ae</li>
      </ul>
    </p>
    <Row>
        <Col md="6">
     <Line data={totalLiquid} options={firstChartOptions}
        //getDatasetAtEvent={mainChartClick}
        getElementAtEvent={getElementAtEvent}
        //getElementsAtEvent={getElementsAtEvent}
      >
     </Line>
     </Col>
     <Col md="6">
     <Line data={totalUtilz} options={firstChartOptions}
        //getDatasetAtEvent={mainChartClick}
        getElementAtEvent={getElementAtEvent}
        //getElementsAtEvent={getElementsAtEvent}
      >
     </Line>
     </Col>
     </Row>
     {/* <div align="center"><Button onClick={resetChart}>Reset Chart</Button></div> */}
    </>)
  }

  function FlashLoans() {

    const [data, setData] = useState();
    const [dataDaily, setDataDaily] = useState();
    const [totalLiquid, setTotalLiquid] = useState();
    const [totalUtilz, setTotalUtilz] = useState();
    const [error, setError] = useState();
    const [errorData, setErrorData] = useState();
    const [loading, setLoading] = useState();
    const [firstChart, setFirstChart] = useState();
    const firstChartOptions = {
      title: { display: true, text: 'My Chart' },
      zoom: {
        enabled: true,
        mode: 'x',
      },
      pan: {
        enabled: true,
        mode: 'x',
      },
    }
  
    const mainChartClick = dataset => {
      if (!dataset.length) return;
      const datasetIndex = dataset[0].datasetIndex;
      //console.log("di",firstChart.datasets[datasetIndex].label);
    }
  
    const getElementAtEvent = element => {
  
    };
    
    let labels = []
    let WBTC = []
    let WBTC_Utils = []
  
    useEffect( () => {
      
      axios.get("https://api.flipsidecrypto.com/api/v2/queries/3689e40a-b6e4-4aa1-9782-b7eedad0be96/data/latest")
      .then( response => {
        setData(response.data);
        response.data.map( x => {
          labels.push(x.EDDATE.slice(0,10))
          WBTC.push(x.WBTC_FLASHLOAN_AMOUNT_USD)
          WBTC_Utils.push(x.WBTC_UTILIZATION_RATE)
        })
  
        const T_Liquid = {
          labels: labels,
          datasets: [
          {
              label: "Flash Loans in USD",
              data: WBTC,
              fill: true,
              backgroundColor: "rgba(220, 0, 200, 0.2)",
              borderColor: "rgba(220, 0, 200, 1)"
          }
        ]
        };
  
        const T_Utliz = {
          labels: labels,
          datasets: [
          {
              label: "Flash Loans fees in USD",
              data: WBTC_Utils,
              fill: true,
              backgroundColor: "rgba(20, 200, 200, 0.2)",
              borderColor: "rgba(20, 200, 200, 1)"
          }
        ]
        };
  
        //setFirstChart(localChartData);
        setTotalLiquid(T_Liquid);
        setTotalUtilz(T_Utliz);
  
      }).catch(error => {
        setError(true);
        setErrorData(error);
      }).finally(() => {
        setLoading(false);
      })
    } , []);
  
    if (error) return <div>{errorData}</div>;
    if (loading) return <div>Loading...</div>;
  
    return (<>
    <Row>
        <Col md="6">
     <Line data={totalLiquid} options={firstChartOptions}
        //getDatasetAtEvent={mainChartClick}
        getElementAtEvent={getElementAtEvent}
        //getElementsAtEvent={getElementsAtEvent}
      >
     </Line>
     </Col>
     <Col md="6">
     <Line data={totalUtilz} options={firstChartOptions}
        //getDatasetAtEvent={mainChartClick}
        getElementAtEvent={getElementAtEvent}
        //getElementsAtEvent={getElementsAtEvent}
      >
     </Line>
     </Col>
     </Row>
     {/* <div align="center"><Button onClick={resetChart}>Reset Chart</Button></div> */}
    </>)
  }

  function Liquidations() {

    const [data, setData] = useState();
    const [dataDaily, setDataDaily] = useState();
    const [totalLiquid, setTotalLiquid] = useState();
    const [totalUtilz, setTotalUtilz] = useState();
    const [error, setError] = useState();
    const [errorData, setErrorData] = useState();
    const [loading, setLoading] = useState();
    const [firstChart, setFirstChart] = useState();
    const firstChartOptions = {
      title: { display: true, text: 'My Chart' },
      zoom: {
        enabled: true,
        mode: 'x',
      },
      pan: {
        enabled: true,
        mode: 'x',
      },
    }
  
    const mainChartClick = dataset => {
      if (!dataset.length) return;
      const datasetIndex = dataset[0].datasetIndex;
      //console.log("di",firstChart.datasets[datasetIndex].label);
    }
  
    const getElementAtEvent = element => {
  
    };
    
    let labels = []
    let WBTC = []
    let WBTC_Utils = []
  
    useEffect( () => {
      
      axios.get("https://api.flipsidecrypto.com/api/v2/queries/ae816869-2c5a-46f3-8898-699b21621afd/data/latest")
      .then( response => {
        setData(response.data);
        response.data.map( x => {
          labels.push(x.EDDATE.slice(0,10))
          WBTC.push(x.TOTAL_LIQUDATIONS)
          WBTC_Utils.push(x.TX_FEE_SUM)
        })
  
        const T_Liquid = {
          labels: labels,
          datasets: [
          {
              label: "Liquidations USD",
              data: WBTC,
              fill: true,
              backgroundColor: "rgba(120, 100, 200, 0.2)",
              borderColor: "rgba(120, 100, 200, 1)"
          }
        ]
        };
  
        const T_Utliz = {
          labels: labels,
          datasets: [
          {
              label: "Liquidations fees in ETH",
              data: WBTC_Utils,
              fill: true,
              backgroundColor: "rgba(20, 10, 200, 0.2)",
              borderColor: "rgba(20, 10, 200, 1)"
          }
        ]
        };
  
        //setFirstChart(localChartData);
        setTotalLiquid(T_Liquid);
        setTotalUtilz(T_Utliz);
  
      }).catch(error => {
        setError(true);
        setErrorData(error);
      }).finally(() => {
        setLoading(false);
      })
    } , []);
  
    if (error) return <div>{errorData}</div>;
    if (loading) return <div>Loading...</div>;
  
    return (<>
    <Row>
        <Col md="6">
     <Line data={totalLiquid} options={firstChartOptions}
        //getDatasetAtEvent={mainChartClick}
        getElementAtEvent={getElementAtEvent}
        //getElementsAtEvent={getElementsAtEvent}
      >
     </Line>
     </Col>
     <Col md="6">
     <Line data={totalUtilz} options={firstChartOptions}
        //getDatasetAtEvent={mainChartClick}
        getElementAtEvent={getElementAtEvent}
        //getElementsAtEvent={getElementsAtEvent}
      >
     </Line>
     </Col>
     </Row>
     {/* <div align="center"><Button onClick={resetChart}>Reset Chart</Button></div> */}
    </>)
  }

  function FeesToProtocol() {

    const [data, setData] = useState();
    const [dataDaily, setDataDaily] = useState();
    const [totalLiquid, setTotalLiquid] = useState();
    const [totalUtilz, setTotalUtilz] = useState();
    const [error, setError] = useState();
    const [errorData, setErrorData] = useState();
    const [loading, setLoading] = useState();
    const [firstChart, setFirstChart] = useState();
    const firstChartOptions = {
      title: { display: true, text: 'My Chart' },
      zoom: {
        enabled: true,
        mode: 'x',
      },
      pan: {
        enabled: true,
        mode: 'x',
      },
    }
  
    const mainChartClick = dataset => {
      if (!dataset.length) return;
      const datasetIndex = dataset[0].datasetIndex;
      //console.log("di",firstChart.datasets[datasetIndex].label);
    }
  
    const getElementAtEvent = element => {
  
    };
    
    let labels = []
    let WBTC = []
    let WBTC_Utils = []
    let feesum = 0;
    useEffect( () => {
      

      axios.get("https://api.flipsidecrypto.com/api/v2/queries/59f3d511-abc9-4a5c-a624-26a976ff809d/data/latest")
      .then( response => {
        setData(response.data);
        response.data.map( x => {
          labels.push(x.EDDATE.slice(0,10))
          WBTC.push(x.FEES_COLLECTED)
          feesum += x.FEES_COLLECTED
          WBTC_Utils.push(feesum)
        })
  
        const T_Liquid = {
          labels: labels,
          datasets: [
          {
              label: "Fees Collected in USD Per Week",
              data: WBTC,
              fill: true,
              backgroundColor: "rgba(0, 100, 200, 0.2)",
              borderColor: "rgba(20, 100, 200, 1)"
          }
        ]
        };
  
        const T_Utliz = {
          labels: labels,
          datasets: [
          {
              label: "Total Fees Collected in USD",
              data: WBTC_Utils,
              fill: true,
              backgroundColor: "rgba(150, 200, 00, 0.2)",
              borderColor: "rgba(150, 200, 00, 1)"
          }
        ]
        };
  
        //setFirstChart(localChartData);
        setTotalLiquid(T_Liquid);
        setTotalUtilz(T_Utliz);
  
      }).catch(error => {
        setError(true);
        setErrorData(error);
      }).finally(() => {
        setLoading(false);
      })
    } , []);
  
    if (error) return <div>{errorData}</div>;
    if (loading) return <div>Loading...</div>;
  
    return (<>
    <Row>
        <Col md="6">
     <Line data={totalLiquid} options={firstChartOptions}
        //getDatasetAtEvent={mainChartClick}
        getElementAtEvent={getElementAtEvent}
        //getElementsAtEvent={getElementsAtEvent}
      >
     </Line>
     </Col>
     <Col md="6">
     <Line data={totalUtilz} options={firstChartOptions}
        //getDatasetAtEvent={mainChartClick}
        getElementAtEvent={getElementAtEvent}
        //getElementsAtEvent={getElementsAtEvent}
      >
     </Line>
     </Col>
     </Row>
     {/* <div align="center"><Button onClick={resetChart}>Reset Chart</Button></div> */}
    </>)
  }

  
function AAVE_12() {

  const [activeTab, setActiveTab] = useState('1');

  const toggle = tab => {
    if(activeTab !== tab) setActiveTab(tab);
  }

  return (
    <>
      <div className="content">
      <Nav tabs>
      <NavItem>
          <NavLink
            className={classnames({ active: activeTab === '1' })}
            onClick={() => { toggle('1'); }}
          >
            Metric Dashboard
          </NavLink>
        </NavItem>
      </Nav>
        <TabContent activeTab={activeTab}>
          <TabPane tabId='1'>
            <TotalValueLocked></TotalValueLocked>
            <FlashLoans></FlashLoans>
            <Liquidations></Liquidations>
            <FeesToProtocol></FeesToProtocol>
          </TabPane>
        </TabContent>
      </div>
    </>
  );
}

export default AAVE_12;
